struct bitree2d {
    int n, m;
    vector<vector<int>> bit;
    bitree2d(vector<vector<int>> &a) {
        n = sz(a), m = sz(a[0]);
        bit.resize(n+1, vector<int>(m+1, 0));
        rep(i, 0, n) rep(j, 0, m) add(i, j, a[i][j]);
    }
    int lowbit(int x) {return x & -x; }
    int prefix(int x, int y) {int res = 0; for (int i = x+1; i; i -= lowbit(i)) for (int j = y+1; j; j -= lowbit(j)) res += bit[i][j]; return res; }
    void add(int x, int y, int val) {for (int i = x+1; i <= n; i += lowbit(i)) for (int j = y+1; j <= m; j += lowbit(j)) bit[i][j] += val; }
    int query(int x0, int y0, int x1, int y1) {return prefix(x1, y1) - prefix(x0-1, y1) - prefix(x1, y0-1) + prefix(x0-1, y0-1); }
};
