template <char F, int B, int N> struct strhash {
    const int M[10] = {999999937, 999999929, 999999893, 999999883, 999999797, 999999761, 999999757, 999999739, 999999733, 999999677};
    string s;
    int len;
    vector<vector<int>> pw, hs;
    strhash(string S): s(S), len(S.size()) {
        assert(N <= 10);
        pw.assign(len, vector<int>(N));
        fill(pw[0].begin(), pw[0].end(), 1);
        rep(i, 1, len) rep(j, 0, N) pw[i][j] = pw[i-1][j] * B % M[j];
        hs.assign(len+1, vector<int>(N, 0));
        rep(i, 0, len) rep(j, 0, N) hs[i+1][j] = (hs[i][j] * B + s[i] - F) % M[j];
    }
    vector<int> hash(int l, int r) {
        if (!l) return hs[r+1];
        vector<int> res(N);
        rep(i, 0, N) res[i] = (hs[r+1][i] - hs[l][i] * pw[r-l+1][i] % M[i] + M[i]) % M[i];
        return res;
    }
};
