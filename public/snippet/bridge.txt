    vector<pair<int, int>> bridge() {
        vector<int> dfn(n), low(n), parent(n, -1);
        vector<pair<int, int>> res;
        int clock = 0;
        function<void(int, int)> dfs = [&](int u, int p) {
            parent[u] = p;
            low[u] = dfn[u] = ++clock;
            for (auto &edge: e[u]) {
                if (!dfn[edge.v]) {
                    dfs(edge.v, u);
                    cmin(low[u], low[edge.v]);
                    if (low[edge.v] > dfn[u]) res.push_back({parent[edge.v], edge.v});
                }
                else if (dfn[edge.v] < dfn[u] && edge.v != p) cmin(low[u], dfn[edge.v]);
            }
        };
        rep(i, 0, n) if (!~parent[i]) dfs(i, i);
        return res;
    }
