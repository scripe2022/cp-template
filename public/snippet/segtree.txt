template <class T> struct segtree {
    struct node {
        int l, r;
        T val;
        node *ch[2];
    };
    int cnt = 0;
    T DEFAULT_VALUE;
    node *newnode(int l, int r) {
        node *x = &datalist[cnt++];
        x->l = l, x->r = r;
        x->ch[0] = x->ch[1] = nullptr;
        x->val.L = l, x->val.R = r;
        return x;
    }
    vector<int> a;
    vector<node> datalist;
    node *root;
    segtree(vector<int> arr) {
        a = arr, build();
    }
    void pushup(node *x) {
        if (!x) return;
        if (!x->ch[0] && !x->ch[1]) return;
        if (x->ch[0]) pushdown(x->ch[0]);
        if (x->ch[1]) pushdown(x->ch[1]);
        if (x->ch[0] && x->ch[1]) x->val = x->ch[0]->val + x->ch[1]->val;
        else x->val = x->ch[!x->ch[0]]->val;
    }
    void pushdown(node *x) {
        if (!x) return;
        if (x->ch[0]) x->val.pushdown(x->ch[0]->val, 0);
        if (x->ch[1]) x->val.pushdown(x->ch[1]->val, 1);
        x->val.clear();
    }
    T query(int ql, int qr) {
        function<T(node*)> dfs = [&](node *x) -> T {
            if (ql > x->r || qr < x->l) return DEFAULT_VALUE;
            pushdown(x);
            if (x->l >= ql && x->r <= qr) return x->val;
            return dfs(x->ch[0]) + dfs(x->ch[1]);
        };
        return dfs(root);
    }
    template <typename U> void modify(int ql, int qr, U val) {
        function<void(node*)> dfs = [&](node *x) -> void {
            if (ql > x->r || qr < x->l) return;
            pushdown(x);
            if (x->l >= ql && x->r <= qr) {
                x->val.update(val, ql, qr);
                return;
            }
            dfs(x->ch[0]), dfs(x->ch[1]);
            pushup(x);
        };
        dfs(root);
    }
    void build() {
        datalist.resize(sz(a) * 2);
        function<node*(int, int)> dfs = [&](int l, int r) {
            node *x = newnode(l, r);
            if (r > l) x->ch[0] = dfs(l, (l+r) >> 1), x->ch[1] = dfs(((l+r)>>1) + 1, r);
            else x->val.set(a[l]);
            pushup(x);
            return x;
        };
        root = dfs(0, sz(a)-1);
    }
    void graphviz_dump(string filename = "graph.dot") {
        FILE *f = fopen(filename.c_str(), "w");
        fprintf(f, "digraph {\n");
        rep(i, 0, cnt) {
            node *x = &datalist[i];
            fprintf(f, "    %lld[label=\"(%lld, %lld)", i, x->l, x->r);
            vector<string> desired = {
                "sz=" + to_string(x->val.R - x->val.L + 1),
                // "tag=" + (x->val.tag==NaN ? "NaN" : to_string(x->val.tag)),
            };
            for (auto s: desired) fprintf(f, " | %s", s.c_str());
            fprintf(f, "\" shape=\"record\"];\n");
        }
        rep(i, 0, cnt) {
            node *x = &datalist[i];
            if (x->ch[0]) fprintf(f, "    %lld -> %ld;\n", i, x->ch[0] - &datalist[0]);
            if (x->ch[1]) fprintf(f, "    %lld -> %ld;\n", i, x->ch[1] - &datalist[0]);
        }
        fprintf(f, "}\n");
    }
};
    // struct value {
    //     int sum = 0, fst = NaN, mul = NaN;
    //     int L, R;
    //     value operator+(const value &other) const {
    //         value res;
    //         res.sum = sum + other.sum;
    //         res.L = L, res.R = other.R;
    //         return res;
    //     }
    //     void set(int rhs) {
    //         this->sum = rhs;
    //     }
    //     void update(pair<int, int> val, int ql = 0, int qr = 0) {
    //         int f = val.first + L - ql;
    //         int m = val.second;
    //         this->fst = (this->fst==NaN ? f : this->fst + f);
    //         this->mul = (this->mul==NaN ? m : this->mul + m);
    //     }
    //     void pushdown(value &child, int rc) {
    //         if (fst == NaN) return;
    //         if (!rc) child.update({fst, mul}, child.L, child.R);
    //         else child.update({fst + (R-L+1 - (child.R-child.L+1))*mul, mul}, child.L, child.R);
    //     }
    //     void clear() {
    //         if (fst == NaN) return;
    //         sum += (fst + fst + (mul*(R-L))) * (R-L+1) / 2;
    //         fst = mul = NaN;
    //     }
    // };

